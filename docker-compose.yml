services:
  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: musicmood-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - musicmood-network
    healthcheck:
      test: ["CMD-SHELL", "ollama list > /dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: musicmood-backend
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: musicmood
      POSTGRES_USER: musicmood_user
      POSTGRES_PASSWORD: musicmood_pass
      DATABASE_URL: postgresql://musicmood_user:musicmood_pass@postgres:5432/musicmood
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: 8001
      
      # Load from .env file for sensitive data
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      SPOTIFY_REDIRECT_URI: ${SPOTIFY_REDIRECT_URI:-http://localhost:8001/callback}
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://ollama:11434}
      OLLAMA_MODEL: ${OLLAMA_MODEL:-gemma3:4b}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - musicmood-network
    volumes:
      - ./app:/app/app:ro
      - ./alembic:/app/alembic:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Streamlit App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: musicmood-frontend
    restart: unless-stopped
    ports:
      - "8501:8501"
    environment:
      API_BASE_URL: http://backend:8001
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - musicmood-network
    volumes:
      - ./app/frontend:/app/app/frontend:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: musicmood-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: musicmood_user
      POSTGRES_PASSWORD: musicmood_pass
      POSTGRES_DB: musicmood
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U musicmood_user -d musicmood"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - musicmood-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: musicmood-redis
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - musicmood-network

  # pgAdmin (Optional - Web UI for PostgreSQL)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: musicmood-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@musicmood.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - musicmood-network
    profiles:
      - tools  # Only start with: docker-compose --profile tools up

  # Redis Commander (Optional - Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: musicmood-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - musicmood-network
    profiles:
      - tools  # Only start with: docker-compose --profile tools up

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  ollama_data:
    driver: local

networks:
  musicmood-network:
    driver: bridge
